User can sign up:
  User can input a username and password to the authentication form.
  Then, after the form is submitted, the username and password values
  are sent to the fetch API to request a post method to the server.
  In the front end, the page changes to the sign-in page as the
  window.location.hash is changed to "sign-in".
  On the server end the incoming request with the password and username
  is checked to see if it meets the required fields, and if passed,
  the password is hashed and stored into the database using Postgresql.

User can sign in:
  User can input their username and password to the form and the
  submitted password and username are sent to the fetch API to
  send a post request to the server /api/auth/sign-in endpoint.
  Then, on the front end side, the window.location.hash is set to "#"
  and the user property of the state object in the App component is
  set to the user's payload data, resulting in the user being sent to the
  home page where they are rickrolled ðŸ™ƒ.
  On the server side, the server makes sure the inputted password
  and username are correct, and if incorrect, throws an "invalid login"
  error. If they are correct the server proceeds to find the user's data
  in the database using the username to query the database via node-postgres.
  After getting the user's data in the database, the sign-in password
  and hashedpassword from the database is verifyed to see if they match.
  If matched, the user is given a unique token that is associated with that
  user.

User can stay signed in:
  When the user is successfully signed in, the result from the fetch method
  request is called to the onSignIn method of the props property of the this
  object. The onSignIn method is bound to the handleSignIn() function inside
  the App class, which takes that result, which is the token generated by
  the server after the sign-in, and saves it to the browser's local storage.
  That way, the user is authenticated and the token is not gone even if the page
  is refreshed.

User can sign out:
  At the home page, user is able to see a sign out button on the top right
  corner as it appears in the navbar only if user has signed in (user!==null).
  When the button is clicked, the handleSignOut function gets called, which
  is bound to the handleSignOut() function in the App component, which of course
  removes the locally stored token from the browser and sets the component state
  to null, which subsequently brings the client back to the #sign-in page.
